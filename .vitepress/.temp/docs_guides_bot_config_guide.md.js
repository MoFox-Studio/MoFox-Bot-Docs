import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"MoFox-Bot 配置文件 (bot_config.toml) 究极详细教程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/bot_config_guide.md","filePath":"docs/guides/bot_config_guide.md","lastUpdated":1758374899000}');
const _sfc_main = { name: "docs/guides/bot_config_guide.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_NolebaseGitContributors = resolveComponent("NolebaseGitContributors");
  const _component_NolebaseGitChangelog = resolveComponent("NolebaseGitChangelog");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="mofox-bot-配置文件-bot-config-toml-究极详细教程" tabindex="-1">MoFox-Bot 配置文件 (bot_config.toml) 究极详细教程 <a class="header-anchor" href="#mofox-bot-配置文件-bot-config-toml-究极详细教程" aria-label="Permalink to “MoFox-Bot 配置文件 (bot_config.toml) 究极详细教程”">​</a></h1><p>欢迎使用 MoFox-Bot！这份教程将像一本说明书一样，带您深入了解 <code>bot_config.toml</code> 文件中的每一个角落。无论您是初次接触的新手还是寻求深度定制的高级用户，都能在这里找到答案。我们项目的核心是<strong>高度拟人化</strong>，所以接下来的所有配置都将围绕如何创造一个有“灵魂”的 Bot 展开。</p><h2 id="零、重要-如何创建你的配置文件" tabindex="-1">零、重要：如何创建你的配置文件 <a class="header-anchor" href="#零、重要-如何创建你的配置文件" aria-label="Permalink to “零、重要：如何创建你的配置文件”">​</a></h2><p>为了让机器人顺利启动，您需要一份名为 <code>bot_config.toml</code> 的配置文件。</p><p><strong>正确的使用方法是</strong>：</p><ol><li>首先，将项目中的 <code>template/bot_config_template.toml</code> 文件<strong>完整复制</strong>一份。</li><li>将复制出来的文件放到 <code>mmc/config/</code> 目录下，并重命名为 <code>bot_config.toml</code>。</li><li>打开 <code>bot_config.toml</code> 文件，根据本教程的指引，修改其中的配置项。</li></ol><div class="tip custom-block"><p class="custom-block-title">提示</p><p>模板文件中包含了所有必需的配置项，请确保您的最终配置文件是完整的，不要随意删除您不理解的配置块，否则可能导致程序无法启动。</p></div><hr><h2 id="一、基础配置" tabindex="-1">一、基础配置 <a class="header-anchor" href="#一、基础配置" aria-label="Permalink to “一、基础配置”">​</a></h2><p>这部分是让机器人跑起来的“身份证”和“发动机”，是所有功能的基础。</p><h3 id="database-数据库配置" tabindex="-1">[database] - 数据库配置 <a class="header-anchor" href="#database-数据库配置" aria-label="Permalink to “[database] - 数据库配置”">​</a></h3><p>这里决定了机器人的记忆、学到的东西都存放在哪里。</p><ul><li><code>database_type</code>: 数据库类型。 <ul><li><code>&quot;sqlite&quot;</code>: <strong>强烈推荐新手使用</strong>。它就像一个单文件数据库，简单方便，不需要额外安装任何软件。数据库文件会存放在 <code>sqlite_path</code> 指定的位置。</li><li><code>&quot;mysql&quot;</code>: 如果您有专业的服务器，并且希望机器人能承受极大的数据量，可以选择这个。需要您自行搭建 MySQL/MariaDB 服务器。</li></ul></li></ul><h4 id="sqlite-配置" tabindex="-1">SQLite 配置 <a class="header-anchor" href="#sqlite-配置" aria-label="Permalink to “SQLite 配置”">​</a></h4><ul><li><code>sqlite_path</code>: 数据库文件的路径。默认是 <code>&quot;data/MaiBot.db&quot;</code>，<strong>通常无需修改</strong>。</li></ul><h4 id="mysql-配置" tabindex="-1">MySQL 配置 <a class="header-anchor" href="#mysql-配置" aria-label="Permalink to “MySQL 配置”">​</a></h4><p>如果您选择了 <code>mysql</code>，才需要填写这部分。</p><ul><li><code>mysql_host</code>: 您的 MySQL 服务器地址。</li><li><code>mysql_port</code>: 端口，默认 <code>3306</code>。</li><li><code>mysql_database</code>, <code>mysql_user</code>, <code>mysql_password</code>: 您的数据库名、用户名和密码。</li><li><code>mysql_charset</code>: 字符集，默认为 <code>&quot;utf8mb4&quot;</code>。</li><li><code>mysql_unix_socket</code>: Unix套接字路径，用于本地连接，通常留空。</li><li><code>mysql_ssl_mode</code>: SSL模式，用于加密连接，默认为 <code>&quot;DISABLED&quot;</code>。</li><li><code>mysql_ssl_ca</code>, <code>mysql_ssl_cert</code>, <code>mysql_ssl_key</code>: SSL证书路径。</li><li><code>mysql_autocommit</code>: 是否自动提交事务。</li><li><code>mysql_sql_mode</code>: SQL模式。</li><li><code>connection_pool_size</code>: 连接池大小，提高性能。</li><li><code>connection_timeout</code>: 连接超时时间（秒）。</li></ul><h3 id="permission-权限系统" tabindex="-1">[permission] - 权限系统 <a class="header-anchor" href="#permission-权限系统" aria-label="Permalink to “[permission] - 权限系统”">​</a></h3><ul><li><code>master_users</code>: <strong>机器人管理员</strong>的列表。在这里添加您的账号，您将拥有机器人的最高控制权，可以执行所有管理命令。 <ul><li>格式: <code>[[&quot;平台&quot;, &quot;您的ID&quot;]]</code></li><li>示例: <code>master_users = [[&quot;qq&quot;, &quot;123456789&quot;]]</code></li></ul></li></ul><h3 id="bot-机器人身份信息" tabindex="-1">[bot] - 机器人身份信息 <a class="header-anchor" href="#bot-机器人身份信息" aria-label="Permalink to “[bot] - 机器人身份信息”">​</a></h3><ul><li><code>platform</code>: <strong>【必填】</strong> 机器人运行的平台，目前主要是 <code>&quot;qq&quot;</code>。</li><li><code>qq_account</code>: <strong>【必填】</strong> 您的机器人的 QQ 号。</li><li><code>nickname</code>: 机器人的名字。当别人提到这个名字时，机器人可能会做出回应。</li><li><code>alias_names</code>: 机器人的小名、外号。效果同 <code>nickname</code>。</li></ul><h3 id="command-命令配置" tabindex="-1">[command] - 命令配置 <a class="header-anchor" href="#command-命令配置" aria-label="Permalink to “[command] - 命令配置”">​</a></h3><ul><li><code>command_prefixes</code>: 命令的起始符号。比如设置为 <code>[&#39;/&#39;, &#39;!&#39;]</code>，那么 <code>/帮助</code> 和 <code>!帮助</code> 都会被识别为命令。</li></ul><h2 id="二、核心人格与聊天行为" tabindex="-1">二、核心人格与聊天行为 <a class="header-anchor" href="#二、核心人格与聊天行为" aria-label="Permalink to “二、核心人格与聊天行为”">​</a></h2><p>这部分决定了机器人“是谁”以及“它如何说话”，是拟人化的核心。</p><h3 id="personality-人格与风格" tabindex="-1">[personality] - 人格与风格 <a class="header-anchor" href="#personality-人格与风格" aria-label="Permalink to “[personality] - 人格与风格”">​</a></h3><p>这是塑造机器人灵魂的地方！</p><ul><li><code>personality_core</code>: <strong>人格核心</strong>。用一句话概括它的性格，这是最关键的设定。例如：“是一个傲娇的猫娘”。</li><li><code>personality_side</code>: <strong>人格侧面</strong>。对核心的补充，让性格更丰满。例如：“虽然嘴上不饶人，但内心很善良”。</li><li><code>identity</code>: <strong>身份信息</strong>。更具体的设定，比如外貌、年龄、职业等。例如：“年龄17岁，是女孩子，身高165cm，有金色的长发和绿色的眼睛”。</li><li><code>background_story</code>: <strong>世界观背景</strong>。为机器人设定一个独特的背景故事，这部分内容会作为它的背景知识，但它不会主动复述。这有助于LLM更好地理解角色。</li><li><code>safety_guidelines</code>: <strong>安全与互动底线</strong>。设定机器人必须遵守的原则，这是最高指令。例如：“不能说伤害别人的话”。</li><li><code>reply_style</code>: <strong>说话风格</strong>。描述它说话的习惯，例如：“喜欢在句末加上&#39;喵~&#39;，回复通常很简短”。</li><li><code>prompt_mode</code>: Prompt 模式，保持 <code>&quot;s4u&quot;</code> 即可，这是为本项目优化的模式。</li><li><code>compress_personality</code>, <code>compress_identity</code>: <strong>人格压缩</strong>。开启后可以节省一点点资源，但可能会丢失人设细节。如果您的LLM API性能不错，建议都设为 <code>false</code> 以获得最佳拟人效果。</li></ul><h3 id="expression-表达学习" tabindex="-1">[expression] - 表达学习 <a class="header-anchor" href="#expression-表达学习" aria-label="Permalink to “[expression] - 表达学习”">​</a></h3><p>让机器人模仿特定聊天对象的说话风格，变得更“接地气”。</p><ul><li><code>rules</code>: 一个学习规则列表，可以为不同的聊天（私聊/群聊）设置独立的规则。 <ul><li><code>chat_stream_id</code>: 聊天ID，格式为 <code>&quot;platform:id:type&quot;</code> (例如 <code>&quot;qq:123456:private&quot;</code>)。留空 <code>&quot;&quot;</code> 表示全局配置。</li><li><code>use_expression</code>: 是否<strong>使用</strong>学到的表达。</li><li><code>learn_expression</code>: 是否<strong>学习</strong>新的表达。</li><li><code>learning_strength</code>: 学习强度，影响学习频率。数值越大，学得越快。</li><li><code>group</code>: 表达共享组。在同一个组内的聊天会共享学习到的表达方式。</li></ul></li></ul><h3 id="chat-聊天通用设置" tabindex="-1">[chat] - 聊天通用设置 <a class="header-anchor" href="#chat-聊天通用设置" aria-label="Permalink to “[chat] - 聊天通用设置”">​</a></h3><ul><li><code>group_chat_mode</code>: <strong>群聊模式</strong>。 <ul><li><code>&quot;auto&quot;</code>: 自动判断，有人@它或和它连续对话时，会进入专注模式。</li><li><code>&quot;normal&quot;</code>: 只进行简单回复，节省资源。</li><li><code>&quot;focus&quot;</code>: 在群里也尝试进行深度对话，像私聊一样。</li></ul></li><li><code>talk_frequency</code>: <strong>活跃度</strong>。数值越高，它在群里发言就越频繁。1.0为基准值。</li><li><code>focus_value</code>: <strong>专注度</strong>。数值越高，机器人越能进行持久的连续对话，但更耗费资源。</li><li><code>force_reply_private</code>: <strong>私聊强制回复</strong>。开启后，私聊时机器人一定会回复，无视活跃度等判断。</li><li><code>max_context_size</code>: <strong>记忆长度</strong>。机器人能记住的最近对话数量。</li><li><code>thinking_timeout</code>: <strong>思考超时</strong>。机器人单次回复的最长思考时间（秒）。</li><li><code>replyer_random_probability</code>: 首要回复模型被选择的概率。</li><li><code>mentioned_bot_inevitable_reply</code>, <code>at_bot_inevitable_reply</code>: <strong>@必回</strong>。开启后，只要有人@它或提到它的名字，它就一定会回复。</li><li><code>allow_reply_self</code>: 是否允许机器人回复自己发出的消息。</li><li><code>timestamp_display_mode</code>: 消息时间戳的显示格式。</li><li><code>talk_frequency_adjust</code>: <strong>分时段活跃度</strong>。可以设置机器人在不同时间段、不同聊天中有不同的活跃度，实现更精细化的控制。</li><li><code>focus_mode_quiet_groups</code>: 在专注模式下需要保持安静的群组列表。在这些群里，即使是专注模式也不会主动发言。</li></ul><h4 id="主动思考功能" tabindex="-1">主动思考功能 <a class="header-anchor" href="#主动思考功能" aria-label="Permalink to “主动思考功能”">​</a></h4><ul><li><code>enable_proactive_thinking</code>: <strong>主动说话</strong>。开启后，机器人会在没人理它的时候，自己找话题发起聊天。</li><li><code>proactive_thinking_interval</code>: <strong>思考间隔</strong>。大概多久主动说一次话（单位：秒）。</li><li><code>proactive_thinking_in_private</code>, <code>proactive_thinking_in_group</code>: 分别控制是否在私聊和群聊中启用主动思考。</li><li><code>proactive_thinking_enable_in_private</code>, <code>proactive_thinking_enable_in_groups</code>: 指定只在哪些私聊或群聊中启用主动思考，为空则不限制。</li><li><code>delta_sigma</code>: <strong>随机性</strong>。让主动说话的时间变得不那么固定，更像真人。</li></ul><h2 id="三、进阶功能与系统" tabindex="-1">三、进阶功能与系统 <a class="header-anchor" href="#三、进阶功能与系统" aria-label="Permalink to “三、进阶功能与系统”">​</a></h2><p>这部分是机器人的“超能力”，开启后会让它变得更强大、更智能。</p><h3 id="relationship-关系系统" tabindex="-1">[relationship] - 关系系统 <a class="header-anchor" href="#relationship-关系系统" aria-label="Permalink to “[relationship] - 关系系统”">​</a></h3><ul><li><code>enable_relationship</code>: 是否启用关系系统。开启后，机器人会尝试与聊天对象建立和发展关系，影响其说话的语气和态度。</li><li><code>relation_frequency</code>: 关系构建的频率。</li></ul><h3 id="message-receive-消息过滤" tabindex="-1">[message_receive] - 消息过滤 <a class="header-anchor" href="#message-receive-消息过滤" aria-label="Permalink to “[message_receive] - 消息过滤”">​</a></h3><ul><li><code>ban_words</code>: 屏蔽词列表。包含这些词的消息将被忽略。</li><li><code>ban_msgs_regex</code>: 屏蔽消息的正则表达式列表。匹配到的消息将被忽略。</li></ul><h3 id="anti-prompt-injection-反注入系统" tabindex="-1">[anti_prompt_injection] - 反注入系统 <a class="header-anchor" href="#anti-prompt-injection-反注入系统" aria-label="Permalink to “[anti_prompt_injection] - 反注入系统”">​</a></h3><p>用于防止机器人被恶意指令攻击，篡改人格。</p><ul><li><code>enabled</code>: 是否启用该系统。</li><li><code>process_mode</code>: 处理模式，如 <code>&quot;strict&quot;</code> (严格), <code>&quot;lenient&quot;</code> (宽松)等。</li><li><code>whitelist</code>: 用户白名单，这些用户的消息将跳过检测。</li><li>其他均为高级配置，通常无需修改。</li></ul><h3 id="tool-工具" tabindex="-1">[tool] - 工具 <a class="header-anchor" href="#tool-工具" aria-label="Permalink to “[tool] - 工具”">​</a></h3><ul><li><code>enable_tool</code>: 是否在普通聊天中启用工具（如网络搜索、视频分析等）。</li></ul><h3 id="mood-情绪系统" tabindex="-1">[mood] - 情绪系统 <a class="header-anchor" href="#mood-情绪系统" aria-label="Permalink to “[mood] - 情绪系统”">​</a></h3><ul><li><code>enable_mood</code>: <strong>情绪系统</strong>。让机器人拥有喜怒哀乐，并影响它的回复。</li><li><code>mood_update_threshold</code>: 情绪更新阈值，越高，情绪变化越慢，性格越稳定。</li></ul><h3 id="emoji-表情包系统" tabindex="-1">[emoji] - 表情包系统 <a class="header-anchor" href="#emoji-表情包系统" aria-label="Permalink to “[emoji] - 表情包系统”">​</a></h3><ul><li><code>emoji_chance</code>: <strong>发表情包的概率</strong>。</li><li><code>emoji_activate_type</code>: 推荐设为 <code>&quot;llm&quot;</code>，让机器人智能地判断何时该发表情包。</li><li><code>steal_emoji</code>: <strong>偷表情包</strong>。开启后，它会把别人发的有趣表情包收藏起来自己用。</li><li><code>max_reg_num</code>: 收藏表情包的最大数量。</li><li><code>do_replace</code>: 达到最大数量后，是否替换掉旧的表情包。</li><li><code>check_interval</code>: 检查表情包（注册、删除）的时间间隔（分钟）。</li><li><code>content_filtration</code>, <code>filtration_prompt</code>: 表情包内容过滤，防止收藏不合适的图片。</li><li><code>enable_emotion_analysis</code>: 是否对表情包进行二次情感分析，让选择更贴切。</li><li><code>emoji_selection_mode</code>: 表情选择模式，<code>&quot;emotion&quot;</code> (基于情感) 或 <code>&quot;description&quot;</code> (基于图片描述)。</li><li><code>max_context_emojis</code>: 每次传递给LLM的表情包最大数量，0为全部。</li></ul><h3 id="memory-记忆系统" tabindex="-1">[memory] - 记忆系统 <a class="header-anchor" href="#memory-记忆系统" aria-label="Permalink to “[memory] - 记忆系统”">​</a></h3><ul><li><code>enable_memory</code>: <strong>【核心功能】是否开启记忆</strong>。开启后，机器人会记住和用户的对话内容，形成长期记忆。<strong>强烈建议开启</strong>。</li><li><code>enable_llm_instant_memory</code>, <code>enable_vector_instant_memory</code>: <strong>瞬时记忆</strong>。让机器人能更好地记住刚刚说过的话，增强对话连贯性。分为基于LLM和基于向量两种，<strong>建议只开启向量</strong>，效果更好且资源消耗更低。</li><li><code>memory_ban_words</code>: 不希望被记入记忆的词。</li><li>其他 <code>memory_</code>, <code>forget_</code>, <code>consolidate_</code> 开头的选项：用于调整记忆的构建、遗忘、整合频率，<strong>新手建议保持默认</strong>。</li></ul><h3 id="voice-语音识别" tabindex="-1">[voice] - 语音识别 <a class="header-anchor" href="#voice-语音识别" aria-label="Permalink to “[voice] - 语音识别”">​</a></h3><ul><li><code>enable_asr</code>: 是否启用语音识别。开启后，机器人可以“听懂”语音消息。需要额外配置语音识别模型。</li></ul><h3 id="lpmm-knowledge-知识库" tabindex="-1">[lpmm_knowledge] - 知识库 <a class="header-anchor" href="#lpmm-knowledge-知识库" aria-label="Permalink to “[lpmm_knowledge] - 知识库”">​</a></h3><ul><li><code>enable</code>: 是否启用本地知识库功能。这是一个高级功能，用于构建机器人的专属知识体系。</li><li>其他均为知识库的技术参数，<strong>新手建议保持默认</strong>。</li></ul><h3 id="keyword-reaction-关键词-正则回复" tabindex="-1">[keyword_reaction] - 关键词/正则回复 <a class="header-anchor" href="#keyword-reaction-关键词-正则回复" aria-label="Permalink to “[keyword_reaction] - 关键词/正则回复”">​</a></h3><ul><li><code>keyword_rules</code>: 设置关键词触发的固定回复。</li><li><code>regex_rules</code>: 设置正则表达式触发的固定回复。</li></ul><h3 id="custom-prompt-自定义提示词" tabindex="-1">[custom_prompt] - 自定义提示词 <a class="header-anchor" href="#custom-prompt-自定义提示词" aria-label="Permalink to “[custom_prompt] - 自定义提示词”">​</a></h3><ul><li><code>image_prompt</code>: 用于图片描述的提示词。</li><li><code>planner_custom_prompt_content</code>: 用于决策器的自定义提示词内容。</li></ul><h3 id="response-post-process-回复后处理" tabindex="-1">[response_post_process] - 回复后处理 <a class="header-anchor" href="#response-post-process-回复后处理" aria-label="Permalink to “[response_post_process] - 回复后处理”">​</a></h3><ul><li><code>enable_response_post_process</code>: 是否启用回复后处理，包括下面的错别字和分割器。</li></ul><h4 id="chinese-typo-中文错别字生成器" tabindex="-1">[chinese_typo] - 中文错别字生成器 <a class="header-anchor" href="#chinese-typo-中文错别字生成器" aria-label="Permalink to “[chinese_typo] - 中文错别字生成器”">​</a></h4><ul><li><code>enable</code>: 开启后，机器人回复时会模拟真⼈，产⽣⼀些随机的、合理的错别字，增加拟人度。</li><li><code>error_rate</code>, <code>tone_error_rate</code>, <code>word_replace_rate</code>: 控制不同类型错别字的概率。</li></ul><h4 id="response-splitter-回复分割器" tabindex="-1">[response_splitter] - 回复分割器 <a class="header-anchor" href="#response-splitter-回复分割器" aria-label="Permalink to “[response_splitter] - 回复分割器”">​</a></h4><ul><li><code>enable</code>: 开启后，会将过长的回复分割成多条消息发送，避免刷屏。</li><li><code>max_length</code>, <code>max_sentence_num</code>: 控制分割的长度和句子数量。</li></ul><h2 id="四、系统与调试" tabindex="-1">四、系统与调试 <a class="header-anchor" href="#四、系统与调试" aria-label="Permalink to “四、系统与调试”">​</a></h2><p>这部分通常保持默认即可，主要供开发者使用。</p><h3 id="log-日志配置" tabindex="-1">[log] - 日志配置 <a class="header-anchor" href="#log-日志配置" aria-label="Permalink to “[log] - 日志配置”">​</a></h3><ul><li>用于控制日志的输出格式、级别和颜色，供开发者排查问题。</li></ul><h3 id="dependency-management-插件依赖管理" tabindex="-1">[dependency_management] - 插件依赖管理 <a class="header-anchor" href="#dependency-management-插件依赖管理" aria-label="Permalink to “[dependency_management] - 插件依赖管理”">​</a></h3><ul><li><code>auto_install</code>: <strong>【推荐开启】</strong> 是否自动为插件安装所需的Python依赖库。</li><li><code>use_mirror</code>, <code>mirror_url</code>: 使用国内镜像源加速下载。</li></ul><h3 id="debug-调试" tabindex="-1">[debug] - 调试 <a class="header-anchor" href="#debug-调试" aria-label="Permalink to “[debug] - 调试”">​</a></h3><ul><li><code>show_prompt</code>: 是否在日志中显示完整的prompt内容，用于调试人设和功能。</li></ul><h3 id="maim-message-消息服务" tabindex="-1">[maim_message] - 消息服务 <a class="header-anchor" href="#maim-message-消息服务" aria-label="Permalink to “[maim_message] - 消息服务”">​</a></h3><ul><li>用于连接自定义的消息服务器，<strong>通常无需修改</strong>。</li></ul><h3 id="planning-system-规划系统" tabindex="-1">[planning_system] - 规划系统 <a class="header-anchor" href="#planning-system-规划系统" aria-label="Permalink to “[planning_system] - 规划系统”">​</a></h3><ul><li><code>schedule_enable</code>: <strong>日程生成</strong>。开启后，机器人会为自己安排每天的日程。</li><li><code>schedule_guidelines</code>: 生成日程的指导原则。</li><li><code>monthly_plan_enable</code>: <strong>月度计划</strong>。开启后，机器人会为自己制定月度目标。</li><li><code>monthly_plan_guidelines</code>: 生成月度计划的指导原则。</li><li>其他为月度计划的详细参数。</li></ul><h3 id="video-analysis-视频分析" tabindex="-1">[video_analysis] - 视频分析 <a class="header-anchor" href="#video-analysis-视频分析" aria-label="Permalink to “[video_analysis] - 视频分析”">​</a></h3><ul><li><code>enable</code>: <strong>看视频</strong>。开启后，你把视频发给它，它能“看懂”并告诉你视频内容。这是一个非常消耗资源的功能，并且需要正确配置FFmpeg。</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>关于视频分析功能的详细配置（如抽帧模式、分析质量、FFmpeg路径等）和使用方法，请参考专门的 <a href="./video_recognition.html">视频识别功能配置指南</a> 页面。</p></div><h3 id="web-search-网络搜索" tabindex="-1">[web_search] - 网络搜索 <a class="header-anchor" href="#web-search-网络搜索" aria-label="Permalink to “[web_search] - 网络搜索”">​</a></h3><ul><li><code>enable_web_search_tool</code>: <strong>上网冲浪</strong>。让机器人可以搜索网络来回答你的问题。</li><li><code>enable_url_tool</code>: 是否启用URL解析工具，让机器人可以直接“阅读”链接内容。</li><li><code>tavily_api_keys</code>, <code>exa_api_keys</code>: 需要填入第三方搜索服务的 API Key 才能使用。</li><li><code>enabled_engines</code>: 启用的搜索引擎，其中 <code>&quot;ddg&quot;</code> 和 <code>&quot;bing&quot;</code> 都是免费易用的选项。</li><li><code>search_strategy</code>: 搜索策略，如 <code>&quot;single&quot;</code> (单个), <code>&quot;parallel&quot;</code> (并行), <code>&quot;fallback&quot;</code> (备用)。</li></ul><h3 id="sleep-system-睡眠系统" tabindex="-1">[sleep_system] - 睡眠系统 <a class="header-anchor" href="#sleep-system-睡眠系统" aria-label="Permalink to “[sleep_system] - 睡眠系统”">​</a></h3><ul><li><code>enable</code>: 开启后，机器人会模拟人的作息，在设定的时间“睡觉”。</li><li><code>wakeup_threshold</code>, <code>private_message_increment</code>, <code>group_mention_increment</code>: 控制机器人被“吵醒”的机制。</li><li><code>angry_prompt</code>: 被吵醒后生气时的人设。</li><li><code>enable_insomnia_system</code>: <strong>失眠系统</strong>。开启后，机器人可能会因为“压力”等原因失眠。</li><li><code>enable_flexible_sleep</code>: <strong>弹性睡眠</strong>。开启后，机器人不会到点就睡，会根据“睡眠压力”稍微推迟一会。</li><li><code>enable_pre_sleep_notification</code>: <strong>睡前晚安</strong>。开启后，准备睡觉时会发一条消息。</li><li>其他均为睡眠和失眠系统的详细参数。</li></ul><h3 id="cross-context-跨上下文共享" tabindex="-1">[cross_context] - 跨上下文共享 <a class="header-anchor" href="#cross-context-跨上下文共享" aria-label="Permalink to “[cross_context] - 跨上下文共享”">​</a></h3><ul><li><code>enable</code>: 开启后，可以让机器人在不同的群聊/私聊之间共享上下文。</li><li><code>groups</code>: 定义共享组，在同一个组内的聊天会共享上下文。</li></ul><hr><p>配置完成后，请<strong>保存文件</strong>并<strong>重启 MoFox-Bot</strong> 以使更改生效。祝您和您的 Bot 交流愉快！</p>`);
  _push(ssrRenderComponent(_component_NolebaseGitContributors, null, null, _parent));
  _push(ssrRenderComponent(_component_NolebaseGitChangelog, null, null, _parent));
  _push(`</div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("docs/guides/bot_config_guide.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const bot_config_guide = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  bot_config_guide as default
};
