import{_ as t,I as s,c as o,o as n,a3 as d,J as e}from"./chunks/framework.xghCY4x5.js";const b=JSON.parse('{"title":"视频识别功能","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/video_recognition.md","filePath":"docs/guides/video_recognition.md","lastUpdated":1756561376000}'),r={name:"docs/guides/video_recognition.md"};function h(c,i,p,g,k,u){const a=s("NolebaseGitContributors"),l=s("NolebaseGitChangelog");return n(),o("div",null,[i[0]||(i[0]=d(`<h1 id="视频识别功能" tabindex="-1">视频识别功能 <a class="header-anchor" href="#视频识别功能" aria-label="Permalink to “视频识别功能”">​</a></h1><p>本文档将介绍如何启用和配置视频识别功能。</p><h2 id="功能概述" tabindex="-1">功能概述 <a class="header-anchor" href="#功能概述" aria-label="Permalink to “功能概述”">​</a></h2><p>视频识别功能允许机器人分析用户发送的视频（也可以分析B站视频哦），并以文本形式描述视频内容，从而实现机器人看视频的功能。该功能支持多种分析模式和帧提取方法，以在不同场景下实现最佳的性能和效果。</p><h2 id="快速启动" tabindex="-1">快速启动 <a class="header-anchor" href="#快速启动" aria-label="Permalink to “快速启动”">​</a></h2><p>要启用视频识别功能，请按照以下步骤操作：</p><ol><li><p><strong>启用视频分析</strong>： 在 <code>config/bot_config.toml</code> 文件中，找到 <code>[video_analysis]</code> 部分，并将 <code>enable</code> 设置为 <code>true</code>。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">video_analysis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div></li><li><p><strong>下载并配置FFmpeg</strong>： FFmpeg 是一个用于处理多媒体文件的开源工具集。视频识别功能需要 FFmpeg 来提取视频帧(如果是一键包用户的话我已经帮你内置并且配置好了)。</p><ul><li><p><strong>下载 FFmpeg</strong>:</p><ul><li><strong>Windows</strong>: 访问 <a href="https://www.gyan.dev/ffmpeg/builds/" target="_blank" rel="noreferrer">https://www.gyan.dev/ffmpeg/builds/</a> 并下载最新的 <code>essentials</code> 版本。</li><li><strong>macOS</strong>: 使用 Homebrew 安装：<code>brew install ffmpeg</code></li><li><strong>Linux</strong>: 使用您的包管理器安装，例如在 Ubuntu 上：<code>sudo apt update &amp;&amp; sudo apt install ffmpeg</code></li></ul></li><li><p><strong>配置路径</strong>: 解压下载的文件，并将 <code>bin</code> 目录下的 <code>ffmpeg.exe</code> (Windows) 或 <code>ffmpeg</code> (macOS/Linux) 的完整路径配置到 <code>config/bot_config.toml</code> 文件中。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffmpeg_path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;E:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">delveoper</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mmc010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ffmpeg.exe&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 示例路径</span></span></code></pre></div></li></ul></li><li><p><strong>选择模型</strong>： 在 <code>config/model_config.toml</code> 文件中，为 <code>utils_video</code> 任务配置一个或多个视觉语言模型（VLM）。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model_task_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">utils_video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_list = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qwen2.5-vl-72b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li><li><p><strong>重启机器人</strong>： 保存配置文件并重启机器人以使更改生效。</p></li></ol><p>完成以上步骤后，机器人将能够自动分析用户发送的视频。</p><h2 id="编译-rust-模块-可选" tabindex="-1">编译 Rust 模块（可选） <a class="header-anchor" href="#编译-rust-模块-可选" aria-label="Permalink to “编译 Rust 模块（可选）”">​</a></h2><p>视频识别功能依赖于一个名为 <code>rust_video</code> 的 Rust 模块来高效地提取视频帧。通常情况下，如果您是一件包用户，您不需要手动编译此模块。但是，如果您是手动部署用户或者对代码进行了更改或需要从源码构建，请按照以下步骤操作：</p><ol><li><p><strong>安装 Rust 环境</strong>: 如果您尚未安装 Rust，请访问 <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noreferrer">https://www.rust-lang.org/tools/install</a> 并按照说明进行安装。</p></li><li><p><strong>安装 Maturin</strong>: Maturin 是一个用于构建和发布 Rust-Python 包的工具。通过 pip 安装：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maturin</span></span></code></pre></div></li><li><p><strong>编译和安装</strong>: 进入 <code>mmc/rust_video</code> 目录，然后运行以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maturin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span></code></pre></div><p>此命令将在您的 Python 环境中编译并安装 <code>rust_video</code> 模块。</p></li></ol><h2 id="详细配置" tabindex="-1">详细配置 <a class="header-anchor" href="#详细配置" aria-label="Permalink to “详细配置”">​</a></h2><h3 id="bot-config-toml" tabindex="-1"><code>bot_config.toml</code> <a class="header-anchor" href="#bot-config-toml" aria-label="Permalink to “bot_config.toml”">​</a></h3><p><code>[video_analysis]</code> 部分包含以下配置选项：</p><ul><li><code>enable</code>: (布尔值) 是否启用视频分析功能。</li><li><code>analysis_mode</code>: (字符串) 分析模式。 <ul><li><code>&quot;batch_frames&quot;</code>: 批量分析，速度快，推荐。</li><li><code>&quot;frame_by_frame&quot;</code>: 逐帧分析，速度慢但更详细。</li><li><code>&quot;auto&quot;</code>: 自动选择模式。</li></ul></li><li><code>frame_extraction_mode</code>: (字符串) 抽帧模式。 <ul><li><code>&quot;keyframe&quot;</code>: 智能关键帧提取，推荐。</li><li><code>&quot;fixed_number&quot;</code>: 固定总帧数。</li><li><code>&quot;time_interval&quot;</code>: 按时间间隔抽帧。</li></ul></li><li><code>frame_interval_seconds</code>: (浮点数) 按时间间隔抽帧的秒数（仅在 <code>frame_extraction_mode</code> 为 <code>&quot;time_interval&quot;</code> 时生效）。</li><li><code>max_frames</code>: (整数) 最大分析帧数。</li><li><code>frame_quality</code>: (整数) 帧图像JPEG质量 (1-100)。</li><li><code>max_image_size</code>: (整数) 单帧最大图像尺寸(像素)。</li><li><code>enable_frame_timing</code>: (布尔值) 是否在分析中包含帧的时间信息。</li></ul><h3 id="rust-模块相关配置" tabindex="-1">Rust 模块相关配置 <a class="header-anchor" href="#rust-模块相关配置" aria-label="Permalink to “Rust 模块相关配置”">​</a></h3><ul><li><code>rust_keyframe_threshold</code>: (浮点数) 关键帧检测阈值，值越大关键帧越少。</li><li><code>rust_use_simd</code>: (布尔值) 启用SIMD优化（推荐）。</li><li><code>rust_block_size</code>: (整数) 处理块大小，较大值可能提高高分辨率视频性能。</li><li><code>rust_threads</code>: (整数) 线程数，0表示自动检测。</li><li><code>ffmpeg_path</code>: (字符串) FFmpeg可执行文件路径。</li></ul><h3 id="提示词配置" tabindex="-1">提示词配置 <a class="header-anchor" href="#提示词配置" aria-label="Permalink to “提示词配置”">​</a></h3><ul><li><code>batch_analysis_prompt</code>: (字符串) 批量分析时使用的提示词。您可以在此自定义提示词，以满足不同的人设和场景需求。</li></ul><h2 id="故障排查" tabindex="-1">故障排查 <a class="header-anchor" href="#故障排查" aria-label="Permalink to “故障排查”">​</a></h2><ul><li><strong>视频分析失败</strong>： <ul><li>检查 <code>ffmpeg_path</code> 是否配置正确。</li><li>检查 <code>model_config.toml</code> 中是否为 <code>utils_video</code> 配置了有效的模型。</li><li>查看日志文件 <code>logs/app_*.log.jsonl</code> 以获取详细的错误信息。</li></ul></li><li><strong>Rust 模块加载失败</strong>： <ul><li>如果 <code>rust_video</code> 模块加载失败，视频识别功能将自动禁用。请确保已按照项目文档正确编译和安装 Rust 模块。</li></ul></li></ul>`,21)),e(a),e(l)])}const f=t(r,[["render",h]]);export{b as __pageData,f as default};
